Models:- For the User model, I added additional properties: num_wins (number of winnings), num_games (number of games played) and percentage (wins/games percentage). I added those properties because they express information about a user's performance. I can use them in the get_user_rankings api. - For the Game model, I used missedLetters, correctLetters, and usedLetters to store the information about player's guesses and use them to implement the logic of the hangman game. These three variables have different uses: I used the length of missedLetters to check if the player reaches the number of maximum wrong guesses. I used correctLetters to partially reveal the target and determine if player wins the game. The length of usedLetters is the total number of guesses a player makes before he/she completes the game. The game model also has a history property, which stores each guess and the corresponding result of each move in the game. The history information is used in the get_game_history api. To generate a random word for each game, I use an external python module RandomWords. With this module, I can keep randomness of the word generated and decrease the chance of generating repeated words. For the Score model, I use number of guesses and number of missed letters to record a game's score. Number of guesses is obtained from the length of usedLetters in the Game model, and number of missed letters is obtained from the length of missedLetters in the Game model. Challenge: - The hangman game logic is overall simple to implement. The main challenge is to partially reveal the target word during the game after each legal move. After each legal move, regardless of the guess is right or wrong, the make_move api calls the progress_updater helper function to partially reveal the target word. In a for loop, the helper function checks whether each letter of the target word is in the correctLetters (a property of the Game model) string or not. If a letter is in the correctLetters string, the helper function put it in the reveal_target string in the corresponding position. Other words in the target word but not in the correctLetters string will be represented by an underscore. The whole reveal_target string gives the player the sense that what is the target word looks like and let them know the number of letters in the target word.  